import type { GetServerSideProps, NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import { signOut } from "next-auth/react";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { authOptions } from "./api/auth/[...nextauth]";
import { Products } from "../components/Products";
import { useRouter } from "next/router";

const SignoutButton = () => {
  return (
    <button
      className="w-fit cursor-pointer rounded-md bg-red-500 px-5 py-2 text-lg font-semibold text-white shadow-sm duration-150 hover:bg-red-600"
      onClick={() => {
        signOut({ callbackUrl: "/" });
      }}
    >
      Sign out
    </button>
  );
};

const SubscriptionStatus = () => {
  const { data: subscriptionStatus, isLoading } =
    trpc.user.subscriptionStatus.useQuery();

  if (isLoading) {
    return <p>Subscription Status Loading...</p>;
  }

  return (
    <>
      <div className="grid grid-cols-2 gap-4 rounded border border-dotted border-gray-400 p-5">
        <p>Subscription Active:</p>
        <p>{subscriptionStatus?.active ? "✅" : "❌"}</p>
        <p>Subscription Status:</p>
        <p>{subscriptionStatus?.status}</p>
        <p></p>
        <p>{subscriptionStatus?.active && <ManageBillingButton />}</p>
      </div>
    </>
  );
};

const Dashboard: NextPage = () => {
  // const { data: products, isLoading } = trpc.user.subscriptionStatus.useQuery();

  return (
    <>
      <Head>
        <title>T3 Stripe</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700">
          T3 <span className="text-[#5433FF]">Stripe</span> Dashboard
        </h1>
        <div className="my-10 flex flex-col gap-10">
          <Products />
          <SubscriptionStatus />
        </div>
        <p className="text-2xl text-gray-700">Actions:</p>
        <div className="mt-3 flex flex-col items-center justify-center gap-4">
          <SignoutButton />
        </div>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};

export default Dashboard;

const ManageBillingButton = () => {
  const { mutateAsync: createBillingPortalSession } =
    trpc.stripe.createBillingPortalSession.useMutation();
  const { push } = useRouter();
  return (
    <button
      className="transform rounded bg-black px-2 py-1 text-xs font-semibold uppercase text-white transition-colors duration-300 hover:bg-gray-700 focus:bg-gray-400 focus:outline-none"
      onClick={async () => {
        const { billingPortalUrl } = await createBillingPortalSession();
        if (billingPortalUrl) {
          push(billingPortalUrl);
        }
      }}
    >
      Manage subscription and billing
    </button>
  );
};
