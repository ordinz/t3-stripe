// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
  subscriptions            Subscription[]
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}


model Product {
  // -- Product ID from Stripe, e.g. prod_1234.
  id String @unique
  // -- Whether the product is currently available for purchase.
  active Boolean
  // -- The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
  name String
  // -- The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  description String?
  // -- A URL of the product image in Stripe, meant to be displayable to the customer.
  image String
  // -- Set of key-value pairs, used to store additional information about the object in a structured format.
  metadata Json

  prices Price[]
  subscriptions Subscription[]
}

model Price {
  // -- Price ID from Stripe e.g. price_1234.
  id String @unique @id
  // -- The ID of the prduct that this price belongs to.
  // products Product[] // String references products
  // -- Whether the price can be used for new purchases.
  active Boolean
  // -- A brief description of the price.
  nickname String?
  // -- The unit amount as a positive integer in the smallest currency unit (e.g. 100 cents for US$1.00 or 100 for Â¥100 a zero-decimal currency).
  unitAmount BigInt
  // -- Three-letter ISO currency code in lowercase.
  currency String //check (char_length(currency) = 3)
  // -- One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  type String
  // -- The frequency at which a subscription is billed. One of `day` `week` `month` or `year`.
  interval String
  // -- The number of intervals (specified in the `interval` attribute) between subscription billings. For example `interval=month` and `interval_count=3` bills every 3 months.
  intervalCount Int
  // -- Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  trialPeriodDays Int @default(0)
  // -- Set of key-value pairs used to store additional information about the object in a structured format.
  metadata Json

  productId       String
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  subscriptions Subscription[]
}

model Subscription {
  // -- Subscription ID from Stripe e.g. sub_1234.
  id String @id @unique
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  // -- The status of the subscription object one of subscription_status type above.
  status          StripeSubscriptionStatus?
  // -- Set of key-value pairs used to store additional information about the object in a structured format.
  metadata Json
  // -- ID of the price that created this subscription.
  priceId       String 
  price         Price      @relation(fields: [priceId], references: [id])
  quantity Int
  created DateTime @default(now())
}